var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = BLUEs","category":"page"},{"location":"#BLUEs","page":"Home","title":"BLUEs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for BLUEs.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [BLUEs]","category":"page"},{"location":"#BLUEs.DimEstimate","page":"Home","title":"BLUEs.DimEstimate","text":"struct DimEstimate{Tv <: Number,TC <: Number} \n\nA structure with some vector of values v and associated covariance matrix C.\n\nDiffers from Estimate in that axis dimensions are added.\n\nFields\n\nv :: AbstractVector{Tv}\nC :: AbstractMatrix{TC}\ndims :: Tuple\n\n\n\n\n\n","category":"type"},{"location":"#BLUEs.Estimate","page":"Home","title":"BLUEs.Estimate","text":"struct Estimate{Tv <: Number,TC <: Number}\n\na structure with some vector of values v and associated covariance matrix C\n\nFields\n\nv :: AbstractVector{Tv}\nC :: AbstractMatrix{TC}\n\n\n\n\n\n","category":"type"},{"location":"#BLUEs.OverdeterminedProblem","page":"Home","title":"BLUEs.OverdeterminedProblem","text":"struct OverdeterminedProblem\n\na structure (NamedTuple version) with fields\n\n- `y::Union{<: AbstractVector,NamedTuple}`: \"observations\", namedtuples of vectors\n- `E :: Union{<: AbstractMatrix, NamedTuple}`: model matrices \n- `Cnn⁻¹ :: Union{<: AbstractMatrix, NamedTuple}`: namedtuple of inverse noise covariance matrix\n- `Cxx⁻¹ :: Union{<: AbstractMatrix, Missing}`: tapering matrices, NOT namedtuples \n- `x₀ :: Union{<: AbstractVector, Missing}`: first guess vector\n\n\n\n\n\n","category":"type"},{"location":"#BLUEs.OverdeterminedProblem-Tuple{Union{NamedTuple, AbstractVector}, Union{NamedTuple, AbstractMatrix}, Union{NamedTuple, AbstractMatrix}}","page":"Home","title":"BLUEs.OverdeterminedProblem","text":"function OverdeterminedProblem\n\ngenerates OverdeterminedProblem structure with x₀ = missing, Cxx = missing\n\n\n\n\n\n","category":"method"},{"location":"#BLUEs.UnderdeterminedProblem","page":"Home","title":"BLUEs.UnderdeterminedProblem","text":"struct UnderdeterminedProblem\n\na structure with fields\n\n- `y::AbstractVector`: vector of \"observations\"\n- `E::AbstractMatrix`: model matrix \n- `Cnn::AbstractMatrix`: noise covariance matrix \n- `Cxx::Union{AbstractMatrix}`: tapering matrix \n- `x₀::Union{AbstractVector, Missing}`: first guess vector\n\n\n\n\n\n","category":"type"},{"location":"#BLUEs.UnderdeterminedProblem-Tuple{AbstractVector, AbstractMatrix, AbstractMatrix, AbstractMatrix}","page":"Home","title":"BLUEs.UnderdeterminedProblem","text":"function UnderdeterminedProblem\n\ngenerates UnderdeterminedProblem structure with x₀ = missing, still requires Cxx\n\n\n\n\n\n","category":"method"},{"location":"#BLUEs.controlcost-Tuple{Union{DimEstimate, Estimate}, Union{OverdeterminedProblem, UnderdeterminedProblem}}","page":"Home","title":"BLUEs.controlcost","text":"Cost function contribution from control vector\n\n\n\n\n\n","category":"method"},{"location":"#BLUEs.convolve-Tuple{DimensionalData.AbstractDimArray, DimensionalData.AbstractDimArray, UnitfulLinearAlgebra.UnitfulMatrix}","page":"Home","title":"BLUEs.convolve","text":"function convolve(x::AbstractDimArray, E::AbstractDimArray, coeffs::UnitfulMatrix}     the coeffs argument signifies that x is a 3D array (i.e. >1 state variables)\n\nthis function both convolves, and linearly combines the propagated state variables\n\n\n\n\n\n","category":"method"},{"location":"#BLUEs.convolve-Tuple{DimensionalData.AbstractDimArray, DimensionalData.AbstractDimArray}","page":"Home","title":"BLUEs.convolve","text":"function convolve(E::AbstractDimArray,x::AbstractDimArray)\n\nTake the convolution of E and x\nAccount for proper overlap of dimensions\nSum and take into account units.\n\n\n\n\n\n","category":"method"},{"location":"#BLUEs.cost-Tuple{Estimate, OverdeterminedProblem}","page":"Home","title":"BLUEs.cost","text":"Compute cost function\n\n\n\n\n\n","category":"method"},{"location":"#BLUEs.datacost-Tuple{Union{DimEstimate, Estimate}, Union{OverdeterminedProblem, UnderdeterminedProblem}}","page":"Home","title":"BLUEs.datacost","text":"Cost function contribution from observations\n\n\n\n\n\n","category":"method"},{"location":"#BLUEs.flipped_mult-Tuple{Any, Any}","page":"Home","title":"BLUEs.flipped_mult","text":"function flipped_mult\n\nmultiply in opposite order given, needs to be defined for impulseresponse\n\n\n\n\n\n","category":"method"},{"location":"#BLUEs.gradient-Tuple{OverdeterminedProblem}","page":"Home","title":"BLUEs.gradient","text":"function gradient\n\ncompute ∂J∂x = -(Eᵀ∂J∂n) = -2(Eᵀ(Cnn⁻¹y)) or -2Eᵀ[Cnn⁻¹(y - Ex₀)]\n\n\n\n\n\n","category":"method"},{"location":"#BLUEs.hessian-Tuple{OverdeterminedProblem}","page":"Home","title":"BLUEs.hessian","text":"function hessian\n\ncompute Eᵀ(Cnn⁻¹E) or Eᵀ(Cnn⁻¹E) + Cxx⁻¹\ndepending on if prior is available\n\n\n\n\n\n","category":"method"},{"location":"#BLUEs.impulseresponse-Tuple{Function, Any, Vararg{Any}}","page":"Home","title":"BLUEs.impulseresponse","text":"function impulseresponse(x₀,M)\n\nProbe a function to determine its linear response in matrix form.\nAssumes units are needed and available.\nA simpler function to handle cases without units would be nice.\n\nfunk:: function to be probed\nx:: input variable\nargs:: the arguments that follow x in `funk`\n\n\n\n\n\n","category":"method"},{"location":"#BLUEs.misfitgradient-Tuple{OverdeterminedProblem}","page":"Home","title":"BLUEs.misfitgradient","text":"function misfitgradient\n\nreturns 2(Cnn⁻¹y) or 2[Cnn⁻¹(y - Ex₀)]\n\n\n\n\n\n","category":"method"},{"location":"#BLUEs.predictobs-Tuple{Any, Vararg{Any}}","page":"Home","title":"BLUEs.predictobs","text":"function predictobs(funk,x...)\n\nGet observations derived from function `funk`\ny = funk(x...)\nTurns out to not be useful so far.\n\n\n\n\n\n","category":"method"},{"location":"#BLUEs.solve-Tuple{OverdeterminedProblem}","page":"Home","title":"BLUEs.solve","text":"function solve\n\n    Solve overdetermined problem\n\n    optional alg= :textbook or :hessian\n\n\n\n\n\n","category":"method"},{"location":"#BLUEs.solve-Tuple{UnderdeterminedProblem}","page":"Home","title":"BLUEs.solve","text":"function solve\n\n    Solve underdetermined problem\n\n\n\n\n\n","category":"method"},{"location":"#BLUEs.solve_hessian-Tuple{OverdeterminedProblem}","page":"Home","title":"BLUEs.solve_hessian","text":"function solve_hessian\n\nSolving y = Ex\n\nx̃ = -1/2 (Eᵀ(Cnn⁻¹E))⁻¹ -(Eᵀ 2(Cnn⁻¹y))\nCx̃x̃ = (Eᵀ(Cnn⁻¹E))⁻¹\n(maybe???? doublecheck with Jake)\n\n\n\n\n\n","category":"method"},{"location":"#BLUEs.solve_textbook-Tuple{OverdeterminedProblem}","page":"Home","title":"BLUEs.solve_textbook","text":"function solve_textbook\n\nSolves overdetermined problem\ny = Ex with associated uncertainty Cnn⁻¹ that is used for weighting\n       optionally, can have prior information as well \n\nx̃ = (EᵀCnn⁻¹E)⁻¹[(Cnn⁻¹E)ᵀy]\nCx̃x̃ = (EᵀCnn⁻¹E)⁻¹\n\nIf prior information (Cxx⁻¹, x₀) is available\nx̃ = (EᵀCnn⁻¹E + Cxx⁻¹)⁻¹[(Cnn⁻¹E)ᵀy + Cxx⁻¹x₀]\nCx̃x̃ = (EᵀCnn⁻¹E)⁻¹\n\nSee equations 1.208/1.209 in Dynamical Insights from Data\n\n\n\n\n\n","category":"method"},{"location":"#BLUEs.symmetric_innerproduct-Tuple{NamedTuple}","page":"Home","title":"BLUEs.symmetric_innerproduct","text":"for NamedTuple, add up each Hessian contribution\n\n\n\n\n\n","category":"method"},{"location":"#Base.:*-Tuple{AbstractMatrix, Estimate}","page":"Home","title":"Base.:*","text":"Matrix multiplication for Estimate includes\nerror propagation.\n\n\n\n\n\n","category":"method"},{"location":"#Base.:*-Tuple{NamedTuple, AbstractVector}","page":"Home","title":"Base.:*","text":"multiplication for `NamedTuple`s\n\n\n\n\n\n","category":"method"},{"location":"#Base.:+-Tuple{Estimate, Estimate}","page":"Home","title":"Base.:+","text":"Matrix addition for Estimate includes\nerror propagation. Follow pp. 95, Sec. 2.5.5,\nRecursive Least Squares, \"Dynamical Insights from Data\" class notes\n\n\n\n\n\n","category":"method"},{"location":"#Base.getproperty-Tuple{Estimate, Symbol}","page":"Home","title":"Base.getproperty","text":"function getproperty(x::Estimate, d::Symbol)\n\nFields of Estimate\n\nx::Vector{Measurement}: Estimate and 1σ uncertainty\nσ::Vector{Number}: 1σ uncertainty\nv::Vector{Number}: central value of estimate\nC::Matrix{Number}: estimate uncertainty matrix\n\n\n\n\n\n","category":"method"},{"location":"#LinearAlgebra.pinv-Tuple{OverdeterminedProblem}","page":"Home","title":"LinearAlgebra.pinv","text":"function pinv\n\nLeft pseudo-inverse (i.e., least-squares estimator)\n\n\n\n\n\n","category":"method"}]
}
